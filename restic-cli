#!/bin/bash

source "/opt/restic-cli/restic.conf"

DIR="/opt/restic-cli/"
BIN_DIR="${DIR}bin/"
BIN_NAME="restic"
BIN="${BIN_DIR}${BIN_NAME}"
VERSION="${BIN_DIR}VERSION"

main () {

    if [ "$1" = "update" ]; then
        update
    elif [ "$1" = "init-repo" ]; then
        init-repo
    elif [ "$1" = "init-client" ]; then
        init-client
    elif [ "$1" = "command" ]; then
        shift
        $BIN $@
    elif ( [ "$1" = "backup" ] && [ "$#" -eq 2 ] ); then
        backup $2
    else
        about
    fi

}

init-repo () {
    echo "Initializing repository..."
    $BIN init
    echo "...Done"
}

init-client () {
    echo "Initializing client..."
    $BIN key add
    echo "...Done"
    echo "In order to automate the backup, please add this password to ${DIR}restic.conf as the RESTIC_PASSWORD environmental variable"
}

init-host () {
    echo "Initializing host..."

    echo "...Done"
}

update () {
    echo -n "Checking for restic updates..."
    ARCHITECTURE="linux_amd64"

    LATEST_VERSION=$(curl -s https://api.github.com/repos/restic/restic/releases | grep -E "^    \"name\":" | grep -v "rc" | grep -ohE "[0-9]\.([0-9][\.]?)+" | head -n 1)

    if [ -e $VERSION ]; then
        CURRENT_VERSION=$(cat $VERSION)
        if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "current version ($CURRENT_VERSION) is already latest version ($LATEST_VERSION)"
            return
        fi
    fi

    echo -n "found new version ($LATEST_VERSION), installing..."
    RESTIC_URL="$(curl -s https://api.github.com/repos/restic/restic/releases | grep "browser_download_url" | grep "linux_amd64" | head -n 1 | cut -d '"' -f 4)"

    # Moving old installation out of the way
    if [ -d "$BIN_DIR" ] ; then
        if [ -e "${BIN_DIR}${BIN_NAME}" ]; then
            mv "${BIN_DIR}${BIN_NAME}" "${BIN_DIR}${BIN_NAME}.old"
        fi
    else
        mkdir "$BIN_DIR"
    fi

    # Getting latest version
    wget $RESTIC_URL -O "${BIN_DIR}${BIN_NAME}.bz2" > /dev/null 2>&1
    bzip2 -cd "${BIN_DIR}${BIN_NAME}.bz2" > "${BIN_DIR}${BIN_NAME}"
    rm "${BIN_DIR}${BIN_NAME}.bz2"
    echo "$LATEST_VERSION" > $VERSION
    chmod +x "${BIN_DIR}${BIN_NAME}"
    echo "Done"
}

about () {
    echo "No argument specified"
}

# Choses the right backup config and starts it
# $1: name of backup 
backup () {

    ############################################################################
    # Read config
    ############################################################################

    # Load the correct configuration
    while read -r name path excludes ; do
        if [[ $name == \#* ]] ; then
            # Ignore lines with pound
            continue
        elif [ $1 = $name ] ; then
            # If this is the choosen backup, start backup
            break
        else
            # Clear name, in case it did not match
            name=""
        fi
    done < "${BACKUP_CONFIG}"
    
    # If no config was found, exit
    if [ -z "$name" ] ; then
        echo "No backup config with name $1 found!"
        echo
        help
    fi
    
    ############################################################################
    # Check if job is already running 
    ############################################################################

    # Build PID file path for this job
    THIS_PID="${PID_DIR}${PID_PREFIX}.${name}.pid"

    if [ -e ${THIS_PID} ] ; then
        if ps -p $(cat $THIS_PID) > /dev/null ; then
            ## If restic is currently performing a backup you can't start another one
            echo "Restic is already running"
            exit
        else
            ## If there is a PID file, but no running process delete the pid file
            rm $THIS_PID
        fi
    fi


    # 5) Set log settings
#    THIS_LOG_PATH="${LOG_PATH}${LOG_PREFIX}.${name}.log"
#    THIS_CLI_LOG_PATH="${LOG_PATH}${LOG_PREFIX}.${name}.cli.log"
#    savelog -q "${LOG_PATH}${LOG_PREFIX}.${name}.log"
#    savelog -q "${LOG_PATH}${LOG_PREFIX}.${name}.cli.log"
#    DUPLICATI_CMD+=" --log-file=\"${THIS_LOG_PATH}\"" 

    ############################################################################
    # Build excludes based on backup.conf 
    ############################################################################

    # This variable will hold the final options added to the call
    EXCLUDE_OPTIONS=""

    for EXCLUDE in $excludes ; do
        EXCLUDE_OPTIONS+="--exclude=$EXCLUDE "
    done

    
    # For debugging purposes
    echo "Invoking restic: '${BIN} backup $path ${EXCLUDE_OPTIONS} & echo \$! > ${THIS_PID}'"

    # Running command
    ${BIN} backup $path ${EXCLUDE_OPTIONS} & echo $! > ${THIS_PID}
    
    ############################################################################
    # Make duplicati quiet/monitor log files
    ############################################################################
    # This is a workaround function, using gdb to move the file descriptor currently pointing at stdout (or similar) to the log file
    #fdswap $(cat ${THIS_DUPLICATI_PID}) ${THIS_CLI_LOG_PATH}

    # This function will detach and monitor the changes made to the CLI log in order to give a rich status summary (eg. used by duplicati status, duplicatirc)
    # In case the quiet flag is NOT set, this function will provide the output of the log file to the console
    #monitor_log ${THIS_CLI_LOG_PATH} $(cat ${THIS_DUPLICATI_PID}) ${name} $3 &
    
    ############################################################################
    # Wait for restic to finish, then clean and exit
    ############################################################################
    wait $(cat ${THIS_PID}) > /dev/null 2>&1
    success=$?
    rm ${THIS_PID}
    echo "Exit code was $success"
    echo "Now verifying..."
    ${BIN} check
    echo "Exit code is $?"

}

main $@
