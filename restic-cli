#!/bin/bash

#Requires jq 1.4 and bash 4.2

RESTIC_CONF="/opt/restic-cli/conf/restic.conf"
RESTIC_INIT="/opt/restic-cli/helper/init"
RESTIC_DEINIT="/opt/restic-cli/helper/deinit"

main () {
    if [ "$1" = "update" ]; then
        update
        return
    elif [ "$1" = "init" ]; then
        # Can be found in $RESTIC_INIT
        _init
        return
    elif [ "$1" = "deinit" ]; then
        # Can be found in RESTIC_DEINIT
        _deinit
        return
    elif 
        if [ ! $SKIPUPDATECHECK ]; then
        update-available
        fi
        if [ "$1" = "init-repo" ]; then
            # Can be found in $RESTIC_INIT
            _init-repo
            return
        elif [ "$1" = "init-client" ]; then
            # Can be found in $RESTIC_INIT
            _init-client
            return
        elif [ "$1" = "add-config" ]; then
            # Can be found in $RESTIC_INIT
            _add-backup-config
            return
        elif [ "$1" = "command" ]; then
            shift
            $BIN $@
            echo "Exit code: $?"
            return
        elif [ "$1" = "verify" ]; then
            verify
            return
        elif ( [ "$1" = "backup" ] && [ "$#" -eq 2 ] ); then
            backup $2
            return
        fi
    fi
    about
}

# Choses the right backup config and starts it
# $1: name of backup 
backup () {

    ############################################################################
    # Read config
    ############################################################################

    CONF_DIR="$DIR/conf"
    if [ ! -d "$DIR/conf/$1" ]; then
        echo "Backup with name $1 is not defined!"
        return
    fi
    
    ############################################################################
    # Check if job is already running 
    ############################################################################

    # Build PID file path for this job
    THIS_PID="$DIR/conf/$1/pid"

    if [ -e ${THIS_PID} ] ; then
        if ps -p $(cat $THIS_PID) > /dev/null ; then
            ## If restic is currently performing a backup you can't start another one
            echo "Restic for $1 is already running"
            exit
        else
            ## If there is a PID file, but no running process delete the pid file
            rm $THIS_PID
        fi
    fi


    ############################################################################
    # Setup logging mechanism 
    ############################################################################
    LOG_PATH="$DIR/conf/$1/log"

    ############################################################################
    # Build command based on config
    ############################################################################

    EXCLUDE_OPTIONS=$(
        cat "$DIR/conf/$1/conf" | jq .excludes[] | \
        while read -r EXCLUDE ; do
            echo -n "--exclude=$(echo $EXCLUDE | tr -d '"') "
        done
    )

    BACKUP_PATH=$(cat "$DIR/conf/$1/conf" | jq .path | tr -d '"')
    
    # For debugging purposes

    echo $$ > ${THIS_PID}
    chmod 777 ${THIS_PID}

    echo "$(date): Starting restic with '${BIN} backup $BACKUP_PATH ${EXCLUDE_OPTIONS}" >> $LOG_PATH
    if [ "$2" = "quiet" ]; then
        ${BIN} backup $BACKUP_PATH ${EXCLUDE_OPTIONS} >> $LOG_PATH
        success=$?
    else
        ${BIN} backup $BACKUP_PATH ${EXCLUDE_OPTIONS}
        success=$?
    fi

    rm ${THIS_PID}

    if [ "$success" -eq 0 ]; then
        echo "$(date): Backup of $1 was successfull" >> $LOG_PATH
        echo "+Backup successfull ($(date))" > "$DIR/conf/$1/status"
    else
        echo "$(date): Backup of $1 was NOT successfull (Code: $success)" >> $LOG_PATH
        echo "+Backup NOT successfull ($(date))" > "$DIR/conf/$1/status"
    fi
    echo "################################################################################"
    exit $success
}


update () {
    if ! update-available; then
        return
    fi
    echo "Installing new version ($LATEST_VERSION)..."

    RESTIC_URL="$(curl -s https://api.github.com/repos/restic/restic/releases | grep "browser_download_url" | grep "linux_amd64" | head -n 1 | cut -d '"' -f 4)"

    # Moving old installation out of the way
    if [ -d "$BIN_DIR" ] ; then
        if [ -e "${BIN_DIR}/${BIN_NAME}" ]; then
            mv "${BIN_DIR}/${BIN_NAME}" "${BIN_DIR}/${BIN_NAME}.old"
        fi
    else
        mkdir "$BIN_DIR"
    fi

    # Getting latest version
    wget $RESTIC_URL -O "${BIN_DIR}/${BIN_NAME}.bz2" > /dev/null 2>&1
    bzip2 -cd "${BIN_DIR}/${BIN_NAME}.bz2" > "${BIN_DIR}/${BIN_NAME}"
    rm "${BIN_DIR}/${BIN_NAME}.bz2"
    echo "$LATEST_VERSION" > $VERSION
    chmod +x "${BIN_DIR}/${BIN_NAME}"
    echo "Done"
}

update-available () {
    echo -n "Checking for restic updates..."
    ARCHITECTURE="linux_amd64"

    LATEST_VERSION=$(curl -s https://api.github.com/repos/restic/restic/releases | grep -E "^    \"name\":" | grep -v "rc" | grep -ohE "[0-9]\.([0-9][\.]?)+" | head -n 1)

    if [ -e "$VERSION" ]; then
        CURRENT_VERSION=$(cat $VERSION)
        if [ "$CURRENT_VERSION" = "$LATEST_VERSION" ]; then
            echo "current version ($CURRENT_VERSION) is already latest version ($LATEST_VERSION)!"
            return 1
        fi
    fi
    echo "found new version ($LATEST_VERSION)!"
    return 0
}

verify () {
    echo "Verifying repository..."
    $BIN check
    echo "Done, exit code was $?"
}

about () {
    echo "No argument specified"
}

if [ -e "$RESTIC_CONF" ]; then
    source $RESTIC_CONF
fi


_init-repo () {
    if [ -e "$RESTIC_INIT" ]; then
        source $RESTIC_INIT
    else
        echo "Could not find ${RESTIC_INIT}!!"
    fi
    init-repo
}

_load-init () {
    if [ -e "$RESTIC_INIT" ]; then
        source $RESTIC_INIT
    else
        echo "Could not find ${RESTIC_INIT}!!"
        exit
    fi
}

_load-deinit () {
    if [ -e "$RESTIC_DEINIT" ]; then
        source $RESTIC_DEINIT
    else
        echo "Could not find ${RESTIC_DEINIT}!!"
        exit
    fi
}

_init-client () {
    _load-init
    init-client
}

_init () {
    _load-init
    init
}

_add-backup-config () {
    _load-init
    add-backup-config
}

_deinit () {
    _load-deinit
    deinit
}
main $@
